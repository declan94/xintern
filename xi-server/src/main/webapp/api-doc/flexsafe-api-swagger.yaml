# this is API doc for flexsafe product 
swagger: "2.0"
info:
  title: Flexsafe API
  description: Flexsafe API
  version: "1.0.0"
# the domain of the service
host: flexsafe.cloudafort.com:8080
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json
securityDefinitions:
  basic:
    type: basic
    name: Authorization
    in: header

paths:

# UserGroups
  /userGroups:
    get:
      tags:
        - User Groups
      summary: Get all user groups
      description: |
        This endpoint returns information about all user groups.
        Each userGroup item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/ListResponse-UserGroups"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: 
        - User Groups
      summary: Create user group
      description: |
        This endpoint is used to create a new user group
      parameters:
        - name: userGroup
          in: body
          description: The UserGroup object to create
          required: true
          schema:
            $ref: "#/definitions/UserGroup-Create"
      responses:
        200:
          description: Created UserGroup object
          schema:
            $ref: "#/definitions/UserGroup"
        404:
          description: No such logical volume
        403:
          description: |
            GroupName/GroupTitle not unique.
        400:
          description: |
            Invalid body. 
            (Invalid GroupName/GroupTitle or Missing properties in UserGroup object)
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /userGroups/{groupId}:
    get:
      tags: 
        - User Groups
      summary: Get user group by id
      description: |
        This endpoint returns information about specific user group.
      parameters:
        - name: groupId
          in: path
          type: string
          description: Id of the specific user group.
          required: true
      responses:
        200:
          description: The specific UserGroup object
          schema:
            $ref: "#/definitions/UserGroup"
        404:
          description: No such user group.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: 
        - User Groups
      summary: Update user group
      description: |
        This endpoint is used to update a specific user group
      parameters:
        - name: groupId
          in: path
          type: string
          description: Id of the specific user group.
          required: true
        - name: userGroup
          in: body
          description: Object for updating UserGroup
          required: true
          schema:
            $ref: "#/definitions/UserGroup-Update"
      responses:
        200:
          description: Updated UserGroup object
          schema:
            $ref: "#/definitions/UserGroup"
        400:
          description: Unexpected properties in request body.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: 
        - User Groups
      summary: Delete user group by id
      description: |
        This endpoint is used to delete a specific user group.
      parameters:
        - name: groupId
          in: path
          type: string
          description: Id of the specific user group.
          required: true
        - name: deleteDirectory
          in: query
          type: string
          description: Whether delete user group's root directory and samba share. Set as "true" to delete.
      responses:
        200:
          description: The deleted UserGroup object
          schema:
            $ref: "#/definitions/UserGroup"
        404:
          description: No such user group.
        403:
          description: UserGroup not empty.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /userGroups/{groupId}/users:
    get:
      tags:
        - User Groups
        - Users
      summary: Get all users in the specific user group
      description: |
        This endpoint returns information about all users in the specific user group.
        Each user item contains only a subset of properties.
      parameters:
        - name: groupId
          in: path
          type: string
          description: Id of the specific user group.
          required: true
      responses:
        200:
          description: A ListResponse object with users in [items] field
          schema:
            $ref: "#/definitions/ListResponse-Users"
        404:
          description: No such user group.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
# Users

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: |
        This endpoint returns information about all users.
        Each user item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with users in [items] field
          schema:
            $ref: "#/definitions/ListResponse-Users"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: 
        - Users
      summary: Create user
      description: |
        This endpoint is used to create a new user.
      parameters:
        - name: user
          in: body
          description: The User object to create.
          required: true
          schema:
            $ref: "#/definitions/User-Create"
      responses:
        200:
          description: Created User object
          schema:
            $ref: "#/definitions/User"
        404:
          description: No such user group
        403:
          description: Username/UserTitle not unique.
        400:
          description: |
            Invalid body.
            (Invalid Username/UserTitle or Missing properties in User object)
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /users/{userId}:
    get:
      tags: 
        - Users
        - Common User
      summary: Get user by id
      description: |
        This endpoint returns information about specific user.
      parameters:
        - name: userId
          in: path
          type: string
          description: Id of the specific user. (Set to 0 when authorized as a common user)
          required: true
      responses:
        200:
          description: The specific User object.
          schema:
            $ref: "#/definitions/User"
        404:
          description: No such user.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: 
        - Users
        - Common User
      summary: Update user
      description: |
        This endpoint is used to update a specific user.
      parameters:
        - name: userId
          in: path
          type: string
          description: Id of the specific user. (Set to 0 when authorized as a common user)
          required: true
        - name: user
          in: body
          description: Object for updating User
          required: true
          schema:
            $ref: "#/definitions/User-Update"
      responses:
        200:
          description: Updated User object
          schema:
            $ref: "#/definitions/User"
        400:
          description: Unexpected properties in request body
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: 
        - Users
      summary: Delete user by id
      description: |
        This endpoint is used to delete a specific user.
      parameters:
        - name: userId
          in: path
          type: string
          description: Id of the specific user.
          required: true
        - name: deleteDirectory
          in: query
          type: string
          description: Whether delete user's root directory and samba share. Set as "true" to delete.
      responses:
        200:
          description: The deleted User object
          schema:
            $ref: "#/definitions/User"
        404:
          description: No such user.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /users/{userId}/resetPassword:
    get:
      tags: 
        - Users
      summary: Reset user's password
      description: |
        This endpoint is used to reset user's password
      parameters:
        - name: userId
          in: path
          type: string
          description: Id of the specific user.
          required: true
        - name: force
          in: query
          type: string
          description: Force reset
          required: false
      responses:
        200:
          description: Reseted User object
          schema:
            $ref: "#/definitions/User"
        404:
          description: No such user
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /users/quota/{userName}:
    get:
      tags:
        - Users
      summary: Get quota info for current user.
      description: |
        This endpoint is used to get quota info for user
      parameters:
        - name: userName
          in: path
          type: string
          description: Name of the specific user.
          required: true
      responses:
        200:
          description: The UserQuota object
          schema:
            $ref: "#/definitions/User-Quota"

# StoragePlanning

  /storagePlanning:
    get:
      tags:
        - Storages
      summary: Get all storage information
      description: |
        This endpoint returns information about all days of storages.
        Each storage item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with storages in [items] field
          schema:
            $ref: "#/definitions/ListResponse-StoragePlanning"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /storagePlanning/{date}:
    get:
      tags: 
        - Storages
      summary: Get storage by date
      description: |
        This endpoint returns storage information about specific day.
      parameters:
        - name: date
          in: path
          type: string
          description: date of the specific day. 
          required: true
      responses:
        200:
          description: A ListResponse object with storages in [items] field
          schema:
            $ref: "#/definitions/ListResponse-StoragePlanning"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /storagePlanning/{date}/{id}:
      get:
          tags:
              - Storages
          summary: Get storage by date and id
          description: |
            This endpoints returns storage information about specific day and id.
          parameters:
              - name: date
                in: path
                type: string
                description: date of the specific day. 
                required: true
              - name: id
                in: path
                type: int
                description: specific id. 
                required: true
          responses:
             200:
               description: The specific storage object
               schema:
                 $ref: "#/definitions/StoragePlanning"
             500:
               description: Unexpected error
               schema:
                 $ref: "#/definitions/Error"

  /storagePlanning/{date}/{id}/{duration}:
      get:
          tags:
              - Storages
          summary: Get storage by id at the given period of time
          description: |
            This endpoints returns storage information about specific  id at a given period of time
          parameters:
              - name: date
                in: path
                type: string
                description: date of the specific day. 
                required: true
              - name: id
                in: path
                type: int
                description: specific id. 
                required: true
              - name: duration
                in: path
                type: int
                description: duration
          responses:
             200:
               description: The specific storage object
               schema:
                 $ref: "#/definitions/StoragePlanning"
             500:
               description: Unexpected error
               schema:
                 $ref: "#/definitions/Error"

  #prediction

  /prediction:
      get:
          tags:
              - Prediction
          summary: predict data 
          description: |
             this endpoint returns prediction data a month, three months, half year, a year later
          parameters:
              - name: period
                in: query
                type: int
                description: prediction period 
                required: true
              - name: periodNum
                in: query
                type: int
                description: prediction periodNum 
                required: true
          responses:
             200:
               description: The specific prediction object
               schema:
                 $ref: "#/definitions/Prediction"
             500:
               description: Unexpected error
               schema:
                 $ref: "#/definitions/Error"

  /prediction/history:
      get:
          tags:
              - Prediction
          summary: get history data 
          description: |
             this endpoint returns history data
          parameters:
              - name: period
                in: query
                type: int
                description: period 
                required: true
              - name: periodNum
                in: query
                type: int
                description: periodNum 
                required: true
          responses:
             200:
               description: The specific prediction object
               schema:
                 $ref: "#/definitions/Prediction"
             500:
               description: Unexpected error
               schema:
                 $ref: "#/definitions/Error"

         #accountInfo
  /account:
    get:
      tags:
        - Account Info
      summary: get account info
      description: |
        This endpoint returns account info
      parameters:
      responses:
        200:
          description: AccountInfo object
          schema:
            $ref: "#/definitions/AccountInfo"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: 
        - Account Info
      summary: update account info
      description: |
        This endpoint is used to update account info
      parameters:
        - name: accountInfo
          in: body
          description: The AccountInfo object to create
          required: true
          schema:
            $ref: "#/definitions/AccountInfo-Update"
      responses:
        200:
          description: Update accountInfo object
          schema:
            $ref: "#/definitions/AccountInfo"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  #authentication

  /authentication:
    get:
      tags: 
        - Authentication
      summary: Get current logged user or admin.
      description: |
        This endpoint is used to get current logged user or admin
      parameters:
      responses:
        200:
          description: Current Logged BasicUser object
          schema:
            $ref: "#/definitions/BasicUser"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Authentication
      summary: Reset user's or admin's password
      description: |
        This endpoint is used to reset the user's or admin's password.
      parameters:
        - name: email
          in: query
          type: string
          description: The user's email address
          required: true
      responses:
        200:
          description: Reseted Basic User object
          schema:
            $ref: "#/definitions/BasicUser"
        404:
          description: No such user.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: 
        - Authentication
      summary: Chagne user's or admin's password
      description: |
        This endpoint is used to update the current user's password
      parameters:
        - name: UserPasswordUpdater
          in: body
          description: Object for updating User's password
          required: true
          schema:
            $ref: "#/definitions/User-UpdatePassword"
      responses:
        200:
          description: Updated BasicUser object
          schema:
            $ref: "#/definitions/BasicUser"
        403:
          description: Wrong password.
        400:
          description: Unexpected properties in request body.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

# LVM
  /logicalVolumes:
    get:
      tags:
        - LVM
      summary: Get all logicalVolumes
      description: |
        This endpoint returns information about all logicalVolumes.
        Each LogicalVolume item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with logicalVolumes in [items] field
          schema:
            $ref: "#/definitions/ListResponse-LovicalVolume"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /logicalVolumes/{lvName}:
    get:
      tags:
        - LVM
      summary: Get logicalVolume by name
      description: |
        This endpoint returns information about specific logicalVolume.
      parameters:
        - name: lvName
          in: path
          type: string
          required: true
          description: The logicalVolume's name.
      responses:
        200:
          description: The logicalVolume object.
          schema:
            $ref: "#/definitions/LogicalVolume"
        404:
          description: No such logicalVolume.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /volumeGroups:
    get:
      tags:
        - LVM
      summary: Get all volumeGroups
      description: |
        This endpoint returns information about all volumeGroups.
        Each VolumeGroups item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with volumeGroups in [items] field
          schema:
            $ref: "#/definitions/ListResponse-VolumeGroup"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /volumeGroups/{vgName}:
    get:
      tags:
        - LVM
      summary: Get volumeGroup by name
      description: |
        This endpoint returns information about specific volumeGroup.
      parameters:
        - name: vgName
          in: path
          type: string
          required: true
          description: The volumeGroup's name.
      responses:
        200:
          description: The volumeGroup object.
          schema:
            $ref: "#/definitions/VolumeGroup"
        404:
          description: No such volumeGroup.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /volumeGroups/{vgName}/physicalVolumes:
    get:
      tags:
        - LVM
      summary: Get physicalVolumes of the specific volumeGroup
      description: |
        This endpoint returns information about physicalVolumes of specific volumeGroup.
      parameters:
        - name: vgName
          in: path
          type: string
          required: true
          description: The volumeGroup's name.
      responses:
        200:
          description: A ListResponse object with physicalVolumes in [items] field
          schema:
            $ref: "#/definitions/ListResponse-PhysicalVolume"
        404:
          description: No such volumeGroup.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /physicalVolumes:
    get:
      tags:
        - LVM
      summary: Get all physicalVolumes
      description: |
        This endpoint returns information about all physicalVolumes.
        Each PhysicalVolumes item contains only a subset of properties.
      parameters:
      responses:
        200:
          description: A ListResponse object with physicalVolumes in [items] field
          schema:
            $ref: "#/definitions/ListResponse-PhysicalVolume"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /physicalVolumes/{pvName}:
    get:
      tags:
        - LVM
      summary: Get physicalVolume by name
      description: |
        This endpoint returns information about specific physicalVolume.
      parameters:
        - name: pvName
          in: path
          type: string
          required: true
          description: The physicalVolume's name.
      responses:
        200:
          description: The physicalVolume object.
          schema:
            $ref: "#/definitions/PhysicalVolume"
        404:
          description: No such physicalVolume.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

# Shell
  # /shell:
  #   post:
  #     tags: 
  #       - Shell
  #     summary: Excute a shell command
  #     description: |
  #       This endpoint is used to excute a shell command.
  #     parameters:
  #       - name: shellCommand
  #         in: body
  #         description: The ShellCommand object to excute.
  #         required: true
  #         schema:
  #           $ref: "#/definitions/ShellCommand"
  #     responses:
  #       200:
  #         description: CommandResult object, which describe the result of the excution.
  #         schema:
  #           $ref: "#/definitions/CommandResult"

# Snapshot
  /snapshot:
    get:
      tags:
        - Snapshot
      summary: Get system/disk performence and health infomation
      description: |
        This endpoint is used to get various system/disk performence and health infomation.
        Such as disk i/o, network i/o, cpu ussage, memory usage, disk usage and file change info.
      parameters:
        - name: fields
          in: query 
          type: string
          description: |
           The fields UI wants to query, separated by comma ","
           When query all fields, do not set this param.
          example: diskIO,networkIO,cpuUsage,memoryUsage,diskUsage
      responses:
        200:
          description: The snapshot object.
          schema:
            $ref: "#/definitions/Snapshot"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/snapshot:
    get:
      tags:
        - Snapshot
        - Backup
      summary: Get system/disk performence and health infomation for backup server
      description: |
        This endpoint is used to get various system/disk performence and health infomation for backup server.
        Such as disk i/o, network i/o, cpu ussage, memory usage, disk usage and file change info.
      parameters:
        - name: fields
          in: query 
          type: string
          description: |
           The fields UI wants to query, separated by comma ","
           When query all fields, do not set this param.
          example: diskIO,networkIO,cpuUsage,memoryUsage,diskUsage
      responses:
        200:
          description: The snapshot object.
          schema:
            $ref: "#/definitions/Snapshot"
        404:
          description: The backup server has not been configured.
        403:
          description: Cannot connect to backup server.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /admin:
    get:
      tags:
        - Admin
      summary: Get current admin user
      description: |
       This endpoint is used to get current admin user.
      parameters:
      responses:
        200:
          description: Current AdminUser object
          schema:
            $ref: "#/definitions/AdminUser"
        404:
          description: Admin user does not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: 
        - Admin
      summary: Register admin user
      description: |
        This endpoint is used to create a new admin user.
      parameters:
        - name: adminUser
          in: body
          description: The AdminUser object to create.
          required: true
          schema:
            $ref: "#/definitions/AdminUser-Create"
      responses:
        200:
          description: Created AdminUser object
          schema:
            $ref: "#/definitions/AdminUser"
        403:
          description: Admin user has already registered.
        400:
          description: Invalid body.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Admin
      summary: Update admin user's information
      description: |
        This endpoint is used to update admin user's information
      parameters:
        - name: adminUserInfoUpdater
          in: body
          description: Object for updating AdminUser's infomation
          required: true
          schema:
            $ref: "#/definitions/AdminUser-UpdateInfo"
      responses:
        200:
          description: Updated AdminUser object
          schema:
            $ref: "#/definitions/AdminUser"
        403:
          description: Wrong input.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /log:
    get:
      tags:
        - Log
      summary: Get management logs
      description: |
       This endpoint is used to get management logs.
      produces:
        - text/plain
      parameters:
      responses:
        200:
          description: The logs.
          type: string.
  /log/auth:
    get:
      tags:
        - Log
      summary: Get auth logs
      description: |
       This endpoint is used to get auth logs.
      produces:
        - text/plain
      parameters:
      responses:
        200:
          description: The logs.
          type: string.
  /log/backup:
    get:
      tags:
        - Log
        - Backup
      summary: Get backup logs
      description: |
       This endpoint is used to get backup logs.
      produces:
        - text/plain
      parameters:
      responses:
        200:
          description: The logs.
          type: string.
  /log/restore:
    get:
      tags:
        - Log
        - Backup
      summary: Get restore logs
      description: |
       This endpoint is used to get restore logs.
      produces:
        - text/plain
      parameters:
      responses:
        200:
          description: The logs.
          type: string.

#backup
  /backup/items:
    get:
      tags:
        - Backup
      summary: Get all backup items
      description: |
        This endpoint is used to get all backup items.
      responses:
        200:
          description: The backup items.
          schema:
            $ref: "#/definitions/ListResponse-BackupItems"
    post:
      tags:
        - Backup
      summary: Create a new backup item
      description: |
        This endpoint is used to create a new backup item.
      parameters:
        - name: item
          in: body
          description: The new backup item to create.
          required: true
          schema:
            $ref: "#/definitions/BackupItem-Create"
      responses:
        200:
          description: Created backup item
          schema:
            $ref: "#/definitions/BackupItem"
        400:
          description: Validation failure.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/items/{itemId}:
    delete:
      tags:
        - Backup
      summary: Delete backup item.
      description: |
        This endpoint is used to delete a specific backup item.
      parameters:
        - name: itemId
          in: path
          type: int
          format: int16
          description: The backup item's id.
          required: true
      responses:
        200:
          description: Deleted backup item.
          schema:
            $ref: "#/definitions/BackupItem"
        404:
          description: No such backup item.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/items/{itemId}/versions:
    get:
      tags:
        - Backup
      summary: Get backup item's backup versions.
      description: |
        This endpoint is used to get a backup item's all backup versions.
      parameters:
        - name: itemId
          in: path
          type: integer
          format: int16
          description: The backup item's id. Set 0 to get system backup's versions
          required: true
      responses:
        200:
          description: All backup versions' datetime.
          schema:
            $ref: "#/definitions/ListResponse-BackupVersions"
        404:
          description: No such backup item.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/items/{itemId}/versions/{version}/restore:
    post:
      tags:
        - Backup
      summary: Restore a specific version of backup.
      description: |
        This endpoint is used to restore a specific version of backup
      parameters:
        - name: itemId
          in: path
          type: integer
          format: int16
          description: The backup item's id. Set 0 to restore system backup
          required: true
        - name: version
          in: path
          type: string
          description: The backup's version to be restored.
          required: true
        - name: restoreDest
          in: query
          type: string
          description: The destination path to restore. (Restore to original path when not set)
        - name: force
          in: query
          type: string
          description: Whether force rewrite the destination path. (Automatic set to be true when restoreDest not set)
      responses:
        200:
          description: Restore process's state
          schema:
            $ref: "#/definitions/RestoreState"
        403:
          description: Need force.
        409:
          description: There's a restore process currently running.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/restore:
    get:
      tags:
        - Backup
      summary: Get restore process's state
      description: |
        This endpoint is used to get current restore process's state.
      responses:
        200:
          description: Restore process's state
          schema:
            $ref: "#/definitions/RestoreState"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Backup
      summary: Destroy restore process
      description: |
        This endpoint is used to destroy the current running restore process.
      responses:
        200:
          description: Restore process's state
          schema:
            $ref: "#/definitions/RestoreState"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/items/{itemId}/backup:
    post:
      tags:
        - Backup
      summary: Start a backup process.
      description: |
        This endpoint is used to start a backup process immediately.
      parameters:
        - name: itemId
          in: path
          type: integer
          format: int16
          description: The backup item's id. Set 0 to start system backup
          required: true   
      responses:
        200:
          description: Backup process's state
          schema:
            $ref: "#/definitions/BackupState"
        409:
          description: There's a backup process currently running.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"   

  /backup:
    get:
      tags:
        - Backup
      summary: Get backup process's state
      description: |
        This endpoint is used to get current backup process's state.
      responses:
        200:
          description: Backup process's state
          schema:
            $ref: "#/definitions/BackupState"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Backup
      summary: Destroy backup process
      description: |
        This endpoint is used to destroy the current running backup process.
      responses:
        200:
          description: Backup process's state
          schema:
            $ref: "#/definitions/RestoreState"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /backup/config:
    get:
      tags:
        - Backup
      summary: Get backup config.
      description: |
        This endpoint is used to get the backup config.
      responses:
        200:
          description: Current backup config.
          schema:
            $ref: "#/definitions/BackupConfig"
        404:
          description: Backup config not set yet.
        403:
          description: Cannot connect to backup server with configured server ip.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Backup
      summary: Edit/Create backup config.
      description: |
        This endpoint is used to edit or create backup config.
      parameters:
        - name: backupConfig
          in: body
          description: The new backup config.
          required: true
          schema:
            $ref: "#/definitions/BackupConfig"
      responses:
        200:
          description: Backup config updated/created.
          schema:
            $ref: "#/definitions/BackupConfig"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /ocActivity/getOcActivity:
    get:
      tags:
        - OcActivity
      summary: Get current OcActivity logs
      produces:
        - text/plain
      description: |
       This endpoint is used to get current OcActivity logs.
       
      responses:
        200:
          description: Current OcActivity logs object
          schema:
            $ref: "#/definitions/OcActivity"
        404:
          description: OcActivity logs does not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

#License
  /license/getUUID:
    get:
      tags:
        - License
      summary: Get current License UUID
      produces:
        - text/plain
      description: |
       This endpoint is used to get user uuid.
       
      responses:
        200:
          description: Current user uuid
          schema:
            $ref: "#/definitions/License-GetUUID"
        404:
          description: user uuid does not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
       
  /license/getRemainingTime:
    get:
      tags:
        - License
      summary: Get License Remaining Time
      produces:
        - text/plain
      description: |
       This endpoint is used to get License Remaining Time.
       
      responses:
        200:
          description: Current License Remaining Time
          schema:
            $ref: "#/definitions/License-RemainingTime"
        404:
          description: user License Remaining Time not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
  /license/getUserAmountLimit:
    get:
      tags:
        - License
      summary: Get User Amount Limit
      produces:
        - text/plain
      description: |
       This endpoint is used to get User Amount Limit.
       
      responses:
        200:
          description: Current User Amount Limit
          schema:
            $ref: "#/definitions/License-UserAmountLimit"
        404:
          description: user User Amount Limit not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
  /license/getCheckLicense:
    get:
      tags:
        - License
      summary: Get Check License
      produces:
        - text/plain
      description: |
       This endpoint is used to get Check License.
       
      responses:
        200:
          description: Current Check License
          schema:
            $ref: "#/definitions/License-CheckLicense"
        404:
          description: user Check License not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  
  /license/getLicenseTimeExpired:
    get:
      tags:
        - License
      summary: Get License Time Expired
      produces:
        - text/plain
      description: |
       This endpoint is used to get License Time Expired.
       
      responses:
        200:
          description: Current License Time Expired
          schema:
            $ref: "#/definitions/License-LicenseTimeExpired"
        404:
          description: user License Time Expired not exists.
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
#FileLists            
  /filLists:
    get:
      tags:
        - File Lists
      summary: Get current user upload file
      description: |
         Remote operation performing the read of remote file or folder in the boxSafe server.
      parameters:
        - name: filepath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/filLists"
      responses:
        200:
          description: A ListResponse object with fileList in [items] field
          schema:
            $ref: "#/definitions/FileListResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /filLists/creatFolder:
    get:
      tags:
        - File Lists
      summary: Create new Folder
      description: |
         Remote operation performing the creation of a new folder in the boxSafe server.
      parameters:
        - name: remotePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/creatFolder"                   
        - name: createFullPath
          in: path
          type: boolean
          description: Full path to the new directory to create in the remote server.'True' means that all the ancestor folders should be created if don't exist yet.
          required: true

      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/creatFolderResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"     

  /filLists/rename:
    get:
      tags:
        - File Lists
      summary: reName file or folder
      description: |
         Remote operation performing the rename of a remote file or folder in the boxSafe server.
      parameters:
        - name: oldName
          in: path
          type: string
          description: Old name of the file.
          required: true
          schema:
            $ref: "#/definitions/fileRename"
        - name: oldRemotePath
          in: path
          type: string
          description: Old remote path of the file. 
          required: true
        - name: newName
          in: path
          type: string
          description: New name to set as the name of file.
          required: true
        - name: isFolder
          in: path
          type: boolean
          description: file is folder
          required: true
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/fileRenameResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"       

  /filLists/deleteFile:
    get:
      tags:
        - File Lists
      summary: delete file
      description: |
         Remote operation performing the removal of a remote file or folder in the boxSafe server.
      parameters:
        - name: deleteFilePath
          in: path
          type: string
          description: RemotePath of the remote file or folder to remove from the server.
          required: true
          schema:
            $ref: "#/definitions/deleteFile"         
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/deleteFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"       
            
  /filLists/uploadFile:
    get:
      tags:
        - File Lists
      summary: upload file
      description: |
         Remote operation performing the upload of a remote file to the boxSafe server.
      parameters:
        - name: remotePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/uploadFile"         
      responses:
        200:
          schema:
            $ref: "#/definitions/uploadFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"     


  /filLists/downloadFile:
    get:
      tags:
        - File Lists
      summary: Create new Folder
      description: |
         Remote operation performing the download of a remote file in the boxSafe server.
      parameters:
        - name: remotePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/downloadFile"                   
        - name: localFolderPath
          in: path
          type: string
          description: local path of download the file.
          required: true
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/downloadFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"     

  /filLists/copy:
    get:
      tags:
        - File Lists
      summary: copy file
      description: |
         Remote operation moving a remote file or folder in the boxSafe server to a different folder in the same account.
      parameters:
        - name: srcRemotePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/copyFile"                   
        - name: targetRemotePath
          in: body
          description: Remote path of the file.
          required: true
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/copyFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"  
               
  /filLists/remove:
    get:
      tags:
        - File Lists
      summary: Create new Folder
      description: |
         Remote operation moving a remote file or folder in the boxSafe server to a different folder in the same account.
      parameters:
        - name: srcRemotePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/moveFile"                   
        - name: localFolderPath
          in: path
          type: string
          description: Remote path of the file.
          required: true
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/moveFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"     

  /filLists/listfolder:
    get:
      tags:
        - File Lists
      summary: Create new Folder
      description: |
         Get remote folder.
      parameters:
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
#          schema:
#            $ref: "#/definitions/ListResponse-UserGroups"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"  

#FileShare            
  /fileShare/shareLists:
    get:
      tags:
        - File Share
      summary: Get current user upload file
      description: |
         Provide a list shares for a specific file.The input is the full path of the desired file.The output is a list of everyone who has the file shared with them.
      parameters:
        - name: filePath
          in: path
          type: string
          description: Remote path of the file.
          required: true
          schema:
            $ref: "#/definitions/getShareFile"
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/getShareFileResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
  /fileShare/creatShare:
    get:
      tags:
        - File Share
      summary: Get current user upload file
      description: |
         Creates a new share.  This allows sharing with a user or group or as a link.
      parameters:
        - name: filepath
          in: path
          type: string
          description: Full path of the file/folder being shared. Mandatory argument.
          required: true
          schema:
            $ref: "#/definitions/createShare"
        - name: shareType
          in: path
          type: string
          description: 0 = user, 1 = group, 3 = Public link. Mandatory argument.
          required: true
        - name: shareWith
          in: path
          type: string
          description: User/group ID with who the file should be shared.  This is mandatory for shareType of 0 or 1
          required: true
        - name: publicUpload
          in: path
          type: boolean
          description: If false (default) public cannot upload to a public shared folder.If true public can upload to a shared folder. Only available for public link shares
          required: true
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/createShareResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
            
  /fileShare/removeShare:
    get:
      tags:
        - File Share
      summary: Get current user upload file
      description: |
         Remove a share.
      parameters:
        - name: remoteShareId
          in: path
          type: string
          description: Share ID.
          required: true
          schema:
            $ref: "#/definitions/removeShare"
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/removeShareResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /fileShare/getUserAndGroup:
    get:
      tags:
        - File Share
      summary: Get all user
      description: |
         get all user in group.
      responses:
        200:
          description: A ListResponse object with userGroups in [items] field
          schema:
            $ref: "#/definitions/getUserOrGroupResponse"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

  /emailConfig:
    get:
      tags:
        - Email
      summary: Get email config
      description: |
        Get current email config.
      responses:
        200:
          description: Current EmailConfig object.
          schema:
            $ref: "#/definitions/EmailConfig"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Email
      summary: Edit email config
      description: |
        Edit email config
      parameters:
        - name: newConfig
          in: body
          type: object
          description: new email config
          required: true
          schema:
            $ref: "#/definitions/EmailConfig"
      responses:
        200:
          description: Succeeded, return new EmailConfig object
          schema:
            $ref: "#/definitions/EmailConfig"
        500:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"   

definitions:

  # for user groups

  UG-Privilege:
    type: string
    enum: [READONLY, READWRITE, PRIVATE]
    description: File access privilege

  UG-GroupName:
    type: string
    description: Group name of the user group. Should only contains english letters. Should matches [a-zA-Z0-9_]{1,20}
    example: TestGroup

  UG-GroupTitle:
    type: string
    description: Group title of the user group, Can be Chinese. Should matches [\u4e00-\u9fa5_a-zA-Z0-9_]{1,20}
    example: 内科

  UG-LVName:
    type: string
    description: The name of the Logical Volume related to this user group.
    example: cloudafort-server-vg/lv1

  UserGroup:
    type: object
    required:
      - id
      - href
      - groupName
      - groupTitle
      - privilege
      - rootDirectory
    properties:
      href: 
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/userGroups/1001
      id:
        type: string
        example: "1001"
      groupName:
        schema:
          $ref: "#/definitions/UG-GroupName"
      groupTitle:
        schema:
          $ref: "#/definitions/UG-GroupTitle"
      privilege:
        schema:
          $ref: "#/definitions/UG-Privilege"
      lvName:
        schema:
          $ref: "#/definitions/UG-LVName"
      rootDirectory:
        type: string
        description: Root directory of user group in linux system.
        example: /flexsafe/内科

  UserGroup-Create:
    type: object
    required:
      - groupName
      - groupTitle
      - privilege
    properties:
      groupName:
        schema:
          $ref: "#/definitions/UG-GroupName"
      groupTitle:
        schema:
          $ref: "#/definitions/UG-GroupTitle"
      privilege:
        schema:
          $ref: "#/definitions/UG-Privilege"
      lvName:
        schema:
          $ref: "#/definitions/UG-LVName"

  UserGroup-Update:
    type: object
    properties:
      privilege:
        schema:
          $ref: "#/definitions/UG-Privilege"
      # rootDirectory:
      #   type: string
      #   description: Root directory of user group in linux system.
      #   example: /flexsafe/内科

  ListResponse-UserGroups:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/userGroups
      items:
        type: array
        items:
          $ref: "#/definitions/UserGroup"

  # for users

  U-Privilege:
    type: string
    enum: [READONLY, READWRITE]
    description: File access privilege

  U-Username:
    type: string
    description: Linux username. Should matches [a-zA-Z0-9_]{1,20}
    example: TestUser

  U-UserTitle:
    type: string
    description: User title, can be Chinese. Should matches [\u4e00-\u9fa5_a-zA-Z0-9_]{1,20}
    example: 大夫A

  U-GroupId:
    type: string
    description: Group id of the user group which the user belongs to.
    example: "1001"

  U-GroupName:
    type: string
    description: Group name of the user group which the user belongs to.
    example: TestGroup

  U-Password:
    type: string
    description: User password. When get user, this field is encrypted.
    example: cloudafort

  U-MaxSize:
    type: string
    description: |
      The Quota size(GB) for the user. Should be an integer. 
      Can only be changed by Admin user. 
      So DO NOT set this field when updating user's profile authorized as a common user.
    example: "10"

  U-Email:
    type: string
    description: The user's email address.
    example: "ye.chen@cloudafort.com"

  U-Phone:
    type: string
    description: The user's phone number.
    example: 18810102020

  U-Department:
    type: string
    description: Department user belongs to.
    example: 信息科

  U-Level:
    type: string
    description: The user's level. enum {L1, L2, L3, L4, L5}
    example: L1

  BasicUser:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        schema:
          $ref: "#/definitions/U-Username"
      password:
        schema:
          $ref: "#/definitions/U-Password"
      email:
        schema:
            $ref: "#/definitions/U-Email"

  User:
    type: object
    required:
      - href
      - id
      - username
      - password
      - userTitle
      - groupId
      - groupName
      - privilege
      - rootDirectory
      - maxSize
      - email
    properties:
      href: 
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/users/1002
      id:
        type: string
        example: "1002"
      username:
        schema:
          $ref: "#/definitions/U-Username"
      password:
        schema:
          $ref: "#/definitions/U-Password"
      userTitle:
        schema:
          $ref: "#/definitions/U-UserTitle"
      groupId:
        schema:
          $ref: "#/definitions/U-GroupId"
      groupName:
        schema:
          $ref: "#/definitions/U-GroupName"
      privilege:
        schema:
          $ref: "#/definitions/U-Privilege"
      rootDirectory:
        type: string
        description: Root directory of user in linux system.
        example: /flexsafe/内科/大夫A
      maxSize:
        schema:
          $ref: "#/definitions/U-MaxSize"
      email:
        schema:
          $ref: "#/definitions/U-Email"
      phone:
        schema:
          $ref: "#/definitions/U-Phone"
      department:
        schema:
          $ref: "#/definitions/U-Department"
      level:
        schema:
          $ref: "#/definitions/U-Level"


  User-Create:
    type: object
    required:
      - username
      - password
      - userTitle
      - groupId
      - privilege
      - maxSize
      - email
    properties:
      username:
        schema:
          $ref: "#/definitions/U-Username"
      password:
        schema:
          $ref: "#/definitions/U-Password"
      userTitle:
        schema:
          $ref: "#/definitions/U-UserTitle"
      groupId:
        schema:
          $ref: "#/definitions/U-GroupId"
      privilege:
        schema:
          $ref: "#/definitions/U-Privilege"
      maxSize:
        schema:
          $ref: "#/definitions/U-MaxSize"
      email:
        schema:
            $ref: "#/definitions/U-Email"
      level:
        schema:
          $ref: "#/definitions/U-Level"
      # rootDirectory:
      #   type: string
      #   description: |
      #     Root directory of user in linux system.
      #     If it is not set, it will be generated automatically using groupTitle.
      #   example: /flexsafe/内科/大夫A

  User-Update:
    type: object
    properties:
      privilege:
        schema:
          $ref: "#/definitions/U-Privilege"
      maxSize:
        schema:
          $ref: "#/definitions/U-MaxSize"
      email:
        schema:
            $ref: "#/definitions/U-Email"
      phone:
        schema:
            $ref: "#/definitions/U-Phone"
      department:
        schema:
            $ref: "#/definitions/U-Department"
      # rootDirectory:
      #   type: string
      #   description: Root directory of user in linux system.
      #   example: /flexsafe/内科/大夫A


  User-UpdatePassword:
    type: object
    required:
      - password
      - newPassword
    properties:
      password:
        schema:
          $ref: "#/definitions/U-Password"
      newPassword:
        schema:
          $ref: "#/definitions/U-Password"

  User-Quota:
    type: object
    properties:
      userName:
        schema:
          $ref: "#/definitions/U-Username"
      used:
        type: string
      soft:
        type: string
      hard:
        type: string
      warn:
        type: boolean
      lvName:
        type: string

  ListResponse-Users:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/users
      items:
        type: array
        items:
          $ref: "#/definitions/User"

  # LVM
  LogicalVolume:
    type: object
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/logicalVolumes/xxx
      id:
        type: string
        example: xxx
      name:
        type: string
        example: vagrant-vg/root
      path:
        type: string
        example: /dev/vagrant-vg/root
      used:
        type: string
        example: 50M
      size:
        type: string
        example: 20G
      percent:
        type: string
        example: 1%
      mount:
        type: string
        example: /home/lv1
      health:
        type: string

  ListResponse-LovicalVolume:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/logicalVolumes
      items:
        type: array
        items:
          $ref: "#/definitions/LogicalVolume"

  VolumeGroup:
    type: object
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/VolumeGroups/xxx
      id:
        type: string
        example: xxx
      name:
        type: string
        example: vagrant-vg
      size:
        type: string
        example: 79.52g
      free:
        type: string
        example: "0"

  ListResponse-VolumeGroup:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/VolumeGroups
      items:
        type: array
        items:
          $ref: "#/definitions/VolumeGroup"

  PhysicalVolume:
    type: object
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/PhysicalVolumes/xxx
      id:
        type: string
        example: xxx
      name:
        type: string
        example: /dev/sda5
      vgName:
        type: string
        example: vagrant-vg
      size:
        type: string
        example: 79.52g
      free:
        type: string
        example: "0"
      used:
        type: string
        example: "79.52g"


  ListResponse-PhysicalVolume:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/PhysicalVolumes
      items:
        type: array
        items:
          $ref: "#/definitions/PhysicalVolume"

  # Shell
  # ShellCommand:
  #   type: object
  #   required: 
  #     - command
  #   properties:
  #     command:
  #       type: string
  #       description: The command to be excuted.
  #       example: id

  CommandResult:
    type: object
    properties:
      exitValue:
        type: integer
        format: int64
        description: The command excution exit value.
        example: 0
      stdout:
        type: array
        description: The standard output stream. Each item of the array is one line output.
        items:
          type: string
      stderr:
        type: array
        description: The standard error output stream. Each item of the array is one line output.
        items:
          type: string

  # Snapshot
  IOStatus:
    type: object
    required:
      - read
      - write
    properties:
      read:
        type: string
        example: 100k
      write:
        type: string
        example: 100k

  UsageStatus:
    type: object
    required:
      - used
      - total
    properties:
      used:
        type: string
        example: 3.5GB
      total:
        type: string
        example: 10.0GB

  Snapshot:
    type: object
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/snapshot
      diskIO:
        type: object
        $ref: "#/definitions/IOStatus"
      networkIO:
        type: object
        $ref: "#/definitions/IOStatus"
      cpuUsage:
        type: object
        $ref: "#/definitions/UsageStatus"
      memoryUsage:
        type: object
        $ref: "#/definitions/UsageStatus"
      diskUsage:
        type: object
        $ref: "#/definitions/UsageStatus"

  AdminUser:
    type: object
    required:
      - href
      - username
      - password
      - role
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/admin/1
      username:
        type: string
        example: superuser
      password:
        type: string
        example: xxxxxxx
      email:
        type: string
        example: ye.chen@cloudafort.com
      title:
        type: string
        example: 陈晔
      cellphone:
        type: string
        example: 10010001100
      department:
        type: string
        example: Infomation Management
      role:
        type: string
        example: ADMIN

  AdminUser-Create:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        type: string
        example: superuser
      password:
        type: string
        example: password
      title:
        type: string
        example: 陈晔
      cellphone:
        type: string
        example: 10010001100
      department:
        type: string
        example: Infomation Management
      email:
        type: string
        example: ye.chen@cloudafort.com

  AdminUser-Update:
    type: object
    required:
      - password
      - newPassword
    properties:
      password:
        type: string
        example: password
      newPassword:
        type: string
        example: newPassword

  AdminUser-UpdateInfo:
    type: object
    properties:
      title:
        type: string
        example: 陈晔
      cellphone:
        type: string
        example: 10010001100
      department:
        type: string
        example: Infomation Management

  BackupItem:
    type: object
    required:
      - id
      - type
      - srcId
    properties:
      id:
        type: int
        format: int16m
        example: 1
      type:
        type: string
        example: USER
        description: enum {VOLUME, USER}
      srcId:
        type: string
        example: "1001"
        description: userId or lv path

  BackupItem-Create:
    type: object
    required:
      - type
      - srcId
    properties:
      type:
        type: string
        example: USERGROUP
        description: enum {VOLUME, USER, USERGROUP}
      srcId:
        type: string
        example: "1001"
        description: userId or userGroupId or lv path
      srcLevel:
        type: string
        example: "L1"
        description: only required for USERGROUP type. enum {L1, L2, L3, L4, L5}

  ListResponse-BackupItems:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/items
      items:
        type: array
        items:
          $ref: "#/definitions/BackupItem"

  BackupConfig:
    type: object
    required:
      - serverIp
      - backupInterval
      - sysBackupInterval
      - backupTime
      - reservedCnt
    properties:
      serverIp:
        type: string
        example: 192.168.1.40
      backupInterval:
        type: integer
        format: int64
        example: 1
        description: interval days.
      sysBackupInterval:
        type: integer
        format: int64
        example: 0
        description: interval days for system backup. Set 0 if closed.
      backupTime:
        type: string
        example: 02:00
        description: backup time in a day, with format hh:mm
      reservedCnt:
        type: integer
        format: int64
        example: 5
        description: the most count of backup version reserved for each backup item.

  ListResponse-BackupVersions:
    type: object
    required:
      - href
      - items
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/items
      items:
        type: array
        items:
          type: string
          example: "2016-10-24 13:33:26"

  RestoreState:
    type: object
    required:
      - state
      - exitValue
      - succeeded
      - itemId
      - version
    properties:
      state:
        type: string
        example: Running
        description: enum { NoProcess, Running, Terminated, Destroyed }
      exitValue:
        type: integer
        format: int16
        example: 0
        description: The process's exit value. Only effective when process is Terminated.
      succeeded:
        type: boolean
        example: true
      itemId:
        type: int
        format: int16
        example: 1
      version:
        type: string
        example: "2016-10-24 13:33:26"
      restoreDest:
        type: string
        example: "/home/declan/restore"

  BackupState:
    type: object
    required:
      - state
      - exitValue
      - succeeded
      - itemId
    properties:
      state:
        type: string
        example: Running
        description: enum { NoProcess, Running, Terminated, Destroyed }
      exitValue:
        type: integer
        format: int16
        example: 0
        description: The process's exit value. Only effective when process is Terminated.
      succeeded:
        type: boolean
        example: true
      itemId:
        type: integer
        format: int16
        example: 1
 
  OcActivity:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/ocActivity/getOcActivity

  License-GetUUID:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/license/getUUID

  License-RemainingTime:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/license/getRemainingTime
  
  License-UserAmountLimit:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/license/getUserAmountLimit
  
  License-CheckLicense:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/license/getCheckLicense
        
  License-getLicenseTimeExpired:
    type: string
    required:
      - href
    properties:
      href:
        type: string
        example: http://flexsafe.cloudafort.com:8080/api/v1/license/getLicenseTimeExpired

#fileList response        
  filLists:
    type: object
    required:
      - filepath
    properties:
      filepath:
        type: string
        example: /
 
  FileListResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists

  creatFolder:
    type: object
    required:
      - remotePath
      - createFullPath
    properties:
      remotePath:
        type: string
        example: /Www/fff/mmm/nn
      createFullPath:
        type: boolean
        example: true

  creatFolderResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/creatFolder

  fileRename:
    type: object
    required:
      - oldName
      - oldRemotePath
      - newName
      - isFolder      
    properties:
      oldName:
        type: string
        example: Www123
      oldRemotePath:
        type: string
        example: /Www123/
      newName:
        type: string
        example: www123
      isFolder:
        type: boolean
        example: true
  fileRenameResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/rename 

  deleteFile:
    type: object
    required:
      - deleteFilePath    
    properties:
      deleteFilePath:
        type: string
        example: /Www
        
  deleteFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/deleteFile

  uploadFile:
    type: object
    required:
      - remotePath    
    properties:
      deleteFilePath:
        type: string
        example: /files1.txt
        
  uploadFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/uploadFile
        
  downloadFile:
    type: object
    required:
      - remotePath    
      - localFolderPath      
    properties:
      remotePath:
        type: string
        example: /files1.txt
      localFolderPath:
        type: string
        example: /www
                
  downloadFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/downloadFile
        
        
  copyFile:
    type: object
    required:
      - srcRemotePath    
      - targetRemotePath      
    properties:
      srcRemotePath:
        type: string
        example: /files1.txt
      targetRemotePath:
        type: string
        example: /files1.txt
                
  copyFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/copy
        
  moveFile:
    type: object
    required:
      - srcRemotePath    
      - localFolderPath      
    properties:
      srcRemotePath:
        type: string
        example: /files1.txt
      localFolderPath:
        type: string
        example: /Documents/files1.txt
                
  moveFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/filLists/remove 
        
  getShareFile:
    type: object
    required:
      - filepath    
    properties:
      filepath:
        type: string
        example: /
                
  getShareFileResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/fileShare/shareLists     

  createShare:
    type: object
    required:
      - filepath
      - shareType
      - shareWith
      - publicUpload                      
    properties:
      filepath:
        type: string
        example: /files1.txt
      shareType:
        type: string
        example: 3
      shareWith:
        type: string
        example: ccc
      publicUpload:
        type: boolean
        example: false     
                                   
  createShareResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/fileShare/creatShare
        
  removeShare:
    type: object
    required:
      - remoteShareId    
    properties:
      remoteShareId:
        type: string
        example: 17
                
  removeShareResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/fileShare/removeShare 

  getUserOrGroupResponse:
    type: object
    required:
      - href
    properties:
      href:
        type: object
        example: http://flexsafe.cloudafort.com:8080/api/v1/fileShare/getUserAndGroup
           
  EmailConfig:
    type: object
    required:
      - smtpHost
      - smtpPort
      - username
      - password
    properties:
      smtpHost:
        type: string
        example: smtp.exmail.qq.com
      smtpPort:
        type: integer
        format: int64
        example: 465
      username:
        type: string
        example: do-not-reply@cloudfortdata.com
      password:
        type: string
        example: abc123


  # Errors
  Error:
    type: object
    required:
      - status
      - developerMessage
      - userMessage
    properties:
      status:
        type: string
        example: "500"
      developerMessage:
        type: string
        description: Message for developers to locate the problem.
        example: "Unkown Error."
      userMessage:
        type: string
        description: Message for the end-user.
        example: "Sorry, We have encounted an unkown error."
      

